// --------------------------------------------------------------------------------------
// ================================== Mixin common methods  =============================
// --------------------------------------------------------------------------------------

//
// Clearfix
//
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

//
// Background color mixin
//
@mixin bgClr($backgroundColor, $color,$borderColor) {
  background-color: $backgroundColor;
  border-color: $borderColor;
  color: $color;
}

@mixin leftToRightBgColor($firstColor, $secondColor, $forColor){
  background: $firstColor;
  background: -webkit-linear-gradient(to right, $firstColor, $secondColor);
  background: -moz-linear-gradient(to right, $firstColor, $secondColor);
  background: -ms-linear-gradient(to right, $firstColor, $secondColor);
  background: linear-gradient(to right, $firstColor, $secondColor);
  color: $forColor;
}

@mixin leftToRightColor($firstColor, $secondColor){
  background: $firstColor;
  background: -webkit-linear-gradient(to right, $firstColor, $secondColor);
  background: -moz-linear-gradient(to right, $firstColor, $secondColor);
  background: -ms-linear-gradient(to right, $firstColor, $secondColor);
  background: linear-gradient(to right, $firstColor, $secondColor);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

//
// Progress bar color
//
@mixin progressBarClr($backgroundColor) {
  .mat-progress-bar-buffer {
    background-color: lighten($backgroundColor, 25%);
  }
  .mat-progress-bar-fill {
    &::after {
      background-color: $backgroundColor !important;
    }
  }
}

//
// Border Radius mixin
//
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

//
// Elipsis mixin
//
@mixin elipsis($width) {
  width: $width;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

//
// Item Align mixins
//
@mixin align($align, $justify) {
  align-self: $align;
  text-align: $justify;
}

//
// Nth child For loop Mixin
//
@mixin forLoopNthChild($start, $end, $arrayName){
  @for $i from $start through $end {
    &:nth-child(#{$i}) {
      a {
        color: nth($arrayName, $i);
      }
    }
  }
}

//
// Conditional Media Query mixin
//
@mixin respond($breakPoint) {

  @if $breakPoint == large-desktop {
    @media (min-width: 1800px) { // 112.5 em
      @content;
    }
  }

  @if $breakPoint == big-desktop {
    @media (max-width: 1800px) { // 112.5 em
      @content;
    }
  }

  @if $breakPoint == tab-land {
    @media (min-width: 780px) and (max-width: 1024px) { // 75 em
      @content;
    }
  }

  @if $breakPoint == regular-desktop {
    @media (max-width: 1260px) { // 75 em
      @content;
    }
  }

  @if $breakPoint == tab-port {
    @media (min-width: 600px) and (max-width: 1024px) { // 56.25 em
      @content;
    }
  }

  @if $breakPoint == phone {
    @media (max-width: 600px) { // 37.5 em
      @content;
    }
  }
}
